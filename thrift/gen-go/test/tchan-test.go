// @generated Code generated by thrift-gen. Do not modify.

// Package test is generated code used to make or handle TChannel calls using Thrift.
package test

import (
	"fmt"

	athrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/tchannel-go/thrift"
)

// Interfaces for the service and client for the services defined in the IDL.

// TChanSecondService is the interface that defines the server handler and client interface.
type TChanSecondService interface {
	Echo(ctx thrift.Context, arg string) (string, error)
}

// TChanSimpleService is the interface that defines the server handler and client interface.
type TChanSimpleService interface {
	Call(ctx thrift.Context, arg *Data) (*Data, error)
	Simple(ctx thrift.Context) error
	Throws(ctx thrift.Context, arg string) (string, error)
}

// Implementation of a client and service handler.

type tchanSecondServiceClient struct {
	thriftService string
	client        thrift.TChanClient
}

func NewTChanSecondServiceInheritedClient(thriftService string, client thrift.TChanClient) *tchanSecondServiceClient {
	return &tchanSecondServiceClient{
		thriftService,
		client,
	}
}

// NewTChanSecondServiceClient creates a client that can be used to make remote calls.
func NewTChanSecondServiceClient(client thrift.TChanClient) TChanSecondService {
	return NewTChanSecondServiceInheritedClient("SecondService", client)
}

func (c *tchanSecondServiceClient) Echo(ctx thrift.Context, arg string) (string, error) {
	var resp SecondServiceEchoResult
	args := SecondServiceEchoArgs{
		Arg: arg,
	}
	success, err := c.client.Call(ctx, c.thriftService, "Echo", &args, &resp)
	if err == nil && !success {
	}

	return resp.GetSuccess(), err
}

type tchanSecondServiceServer struct {
	handler TChanSecondService

	interceptorRunner thrift.InterceptorRunner
}

// NewTChanSecondServiceServer wraps a handler for TChanSecondService so it can be
// registered with a thrift.Server.
func NewTChanSecondServiceServer(handler TChanSecondService) thrift.TChanServer {
	return &tchanSecondServiceServer{
		handler: handler,
	}
}

func (s *tchanSecondServiceServer) Service() string {
	return "SecondService"
}

func (s *tchanSecondServiceServer) Methods() []string {
	return []string{
		"Echo",
	}
}

// RegisterInterceptors registers the provided interceptors with the server.
func (s *tchanSecondServiceServer) RegisterInterceptorRunner(runner thrift.InterceptorRunner) {
	s.interceptorRunner = runner
}

func (s *tchanSecondServiceServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {
	case "Echo":
		return s.handleEcho(ctx, protocol)

	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

func (s *tchanSecondServiceServer) handleEcho(ctx thrift.Context, protocol athrift.TProtocol) (handled bool, resp athrift.TStruct, retErr error) {
	var req SecondServiceEchoArgs
	var res SecondServiceEchoResult
	const serviceMethod = "SecondService::Echo"

	if readErr := req.Read(protocol); readErr != nil {
		return false, nil, readErr
	}

	postRun, err := s.interceptorRunner.RunPre(ctx, serviceMethod, &req)

	defer func() {
		resp = &res
		retErr = postRun(resp, err)
		handled = retErr == nil
		if retErr != nil {
			resp = nil
		}
	}()

	if err != nil {
		return
	}

	r, err :=
		s.handler.Echo(ctx, req.Arg)

	if err == nil {
		res.Success = &r
	}

	return
}

type tchanSimpleServiceClient struct {
	thriftService string
	client        thrift.TChanClient
}

func NewTChanSimpleServiceInheritedClient(thriftService string, client thrift.TChanClient) *tchanSimpleServiceClient {
	return &tchanSimpleServiceClient{
		thriftService,
		client,
	}
}

// NewTChanSimpleServiceClient creates a client that can be used to make remote calls.
func NewTChanSimpleServiceClient(client thrift.TChanClient) TChanSimpleService {
	return NewTChanSimpleServiceInheritedClient("SimpleService", client)
}

func (c *tchanSimpleServiceClient) Call(ctx thrift.Context, arg *Data) (*Data, error) {
	var resp SimpleServiceCallResult
	args := SimpleServiceCallArgs{
		Arg: arg,
	}
	success, err := c.client.Call(ctx, c.thriftService, "Call", &args, &resp)
	if err == nil && !success {
	}

	return resp.GetSuccess(), err
}

func (c *tchanSimpleServiceClient) Simple(ctx thrift.Context) error {
	var resp SimpleServiceSimpleResult
	args := SimpleServiceSimpleArgs{}
	success, err := c.client.Call(ctx, c.thriftService, "Simple", &args, &resp)
	if err == nil && !success {
		if e := resp.SimpleErr; e != nil {
			err = e
		}
	}

	return err
}

func (c *tchanSimpleServiceClient) Throws(ctx thrift.Context, arg string) (string, error) {
	var resp SimpleServiceThrowsResult
	args := SimpleServiceThrowsArgs{
		Arg: arg,
	}
	success, err := c.client.Call(ctx, c.thriftService, "Throws", &args, &resp)
	if err == nil && !success {
		if e := resp.SimpleErr; e != nil {
			err = e
		}
	}

	return resp.GetSuccess(), err
}

type tchanSimpleServiceServer struct {
	handler TChanSimpleService

	interceptorRunner thrift.InterceptorRunner
}

// NewTChanSimpleServiceServer wraps a handler for TChanSimpleService so it can be
// registered with a thrift.Server.
func NewTChanSimpleServiceServer(handler TChanSimpleService) thrift.TChanServer {
	return &tchanSimpleServiceServer{
		handler: handler,
	}
}

func (s *tchanSimpleServiceServer) Service() string {
	return "SimpleService"
}

func (s *tchanSimpleServiceServer) Methods() []string {
	return []string{
		"Call",
		"Simple",
		"Throws",
	}
}

// RegisterInterceptors registers the provided interceptors with the server.
func (s *tchanSimpleServiceServer) RegisterInterceptorRunner(runner thrift.InterceptorRunner) {
	s.interceptorRunner = runner
}

func (s *tchanSimpleServiceServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {
	case "Call":
		return s.handleCall(ctx, protocol)
	case "Simple":
		return s.handleSimple(ctx, protocol)
	case "Throws":
		return s.handleThrows(ctx, protocol)

	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

func (s *tchanSimpleServiceServer) handleCall(ctx thrift.Context, protocol athrift.TProtocol) (handled bool, resp athrift.TStruct, retErr error) {
	var req SimpleServiceCallArgs
	var res SimpleServiceCallResult
	const serviceMethod = "SimpleService::Call"

	if readErr := req.Read(protocol); readErr != nil {
		return false, nil, readErr
	}

	postRun, err := s.interceptorRunner.RunPre(ctx, serviceMethod, &req)

	defer func() {
		resp = &res
		retErr = postRun(resp, err)
		handled = retErr == nil
		if retErr != nil {
			resp = nil
		}
	}()

	if err != nil {
		return
	}

	r, err :=
		s.handler.Call(ctx, req.Arg)

	if err == nil {
		res.Success = r
	}

	return
}

func (s *tchanSimpleServiceServer) handleSimple(ctx thrift.Context, protocol athrift.TProtocol) (handled bool, resp athrift.TStruct, retErr error) {
	var req SimpleServiceSimpleArgs
	var res SimpleServiceSimpleResult
	const serviceMethod = "SimpleService::Simple"

	if readErr := req.Read(protocol); readErr != nil {
		return false, nil, readErr
	}

	postRun, err := s.interceptorRunner.RunPre(ctx, serviceMethod, &req)

	defer func() {
		resp = &res
		retErr = postRun(resp, err)
		handled = retErr == nil
		if retErr != nil {
			resp = nil
			switch v := retErr.(type) {
			case *SimpleErr:
				if v == nil {
					retErr = fmt.Errorf("Handler for simpleErr returned non-nil error type *SimpleErr but nil value")
				} else {
					res.SimpleErr = v
					retErr = nil
					resp = &res
				}
			}
		}
	}()

	if err != nil {
		return
	}

	err =
		s.handler.Simple(ctx)

	return
}

func (s *tchanSimpleServiceServer) handleThrows(ctx thrift.Context, protocol athrift.TProtocol) (handled bool, resp athrift.TStruct, retErr error) {
	var req SimpleServiceThrowsArgs
	var res SimpleServiceThrowsResult
	const serviceMethod = "SimpleService::Throws"

	if readErr := req.Read(protocol); readErr != nil {
		return false, nil, readErr
	}

	postRun, err := s.interceptorRunner.RunPre(ctx, serviceMethod, &req)

	defer func() {
		resp = &res
		retErr = postRun(resp, err)
		handled = retErr == nil
		if retErr != nil {
			resp = nil
			switch v := retErr.(type) {
			case *SimpleErr:
				if v == nil {
					retErr = fmt.Errorf("Handler for simpleErr returned non-nil error type *SimpleErr but nil value")
				} else {
					res.SimpleErr = v
					retErr = nil
					resp = &res
				}
			}
		}
	}()

	if err != nil {
		return
	}

	r, err :=
		s.handler.Throws(ctx, req.Arg)

	if err == nil {
		res.Success = &r
	}

	return
}
