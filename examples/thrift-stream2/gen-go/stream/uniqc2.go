// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package stream

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type UniqC2 interface {
	UniqC

	// Parameters:
	//  - Arg
	Fakerun(arg *StringStream) (r *SCountStream, err error)
}

type UniqC2Client struct {
	*UniqCClient
}

func NewUniqC2ClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UniqC2Client {
	return &UniqC2Client{UniqCClient: NewUniqCClientFactory(t, f)}
}

func NewUniqC2ClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UniqC2Client {
	return &UniqC2Client{UniqCClient: NewUniqCClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - Arg
func (p *UniqC2Client) Fakerun(arg *StringStream) (r *SCountStream, err error) {
	if err = p.sendFakerun(arg); err != nil {
		return
	}
	return p.recvFakerun()
}

func (p *UniqC2Client) sendFakerun(arg *StringStream) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("fakerun", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UniqC2FakerunArgs{
		Arg: arg,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UniqC2Client) recvFakerun() (value *SCountStream, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "fakerun" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "fakerun failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "fakerun failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "fakerun failed: invalid message type")
		return
	}
	result := UniqC2FakerunResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type UniqC2Processor struct {
	*UniqCProcessor
}

func NewUniqC2Processor(handler UniqC2) *UniqC2Processor {
	self12 := &UniqC2Processor{NewUniqCProcessor(handler)}
	self12.AddToProcessorMap("fakerun", &uniqC2ProcessorFakerun{handler: handler})
	return self12
}

type uniqC2ProcessorFakerun struct {
	handler UniqC2
}

func (p *uniqC2ProcessorFakerun) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UniqC2FakerunArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fakerun", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UniqC2FakerunResult{}
	var retval *SCountStream
	var err2 error
	if retval, err2 = p.handler.Fakerun(args.Arg); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fakerun: "+err2.Error())
		oprot.WriteMessageBegin("fakerun", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fakerun", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Arg
type UniqC2FakerunArgs struct {
	Arg *StringStream `thrift:"arg,1" json:"arg"`
}

func NewUniqC2FakerunArgs() *UniqC2FakerunArgs {
	return &UniqC2FakerunArgs{}
}

var UniqC2FakerunArgs_Arg_DEFAULT *StringStream

func (p *UniqC2FakerunArgs) GetArg() *StringStream {
	if !p.IsSetArg() {
		return UniqC2FakerunArgs_Arg_DEFAULT
	}
	return p.Arg
}
func (p *UniqC2FakerunArgs) IsSetArg() bool {
	return p.Arg != nil
}

func (p *UniqC2FakerunArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UniqC2FakerunArgs) readField1(iprot thrift.TProtocol) error {
	p.Arg = &StringStream{}
	if err := p.Arg.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Arg), err)
	}
	return nil
}

func (p *UniqC2FakerunArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fakerun_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UniqC2FakerunArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err)
	}
	if err := p.Arg.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Arg), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err)
	}
	return err
}

func (p *UniqC2FakerunArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UniqC2FakerunArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UniqC2FakerunResult struct {
	Success *SCountStream `thrift:"success,0" json:"success,omitempty"`
}

func NewUniqC2FakerunResult() *UniqC2FakerunResult {
	return &UniqC2FakerunResult{}
}

var UniqC2FakerunResult_Success_DEFAULT *SCountStream

func (p *UniqC2FakerunResult) GetSuccess() *SCountStream {
	if !p.IsSetSuccess() {
		return UniqC2FakerunResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UniqC2FakerunResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UniqC2FakerunResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UniqC2FakerunResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &SCountStream{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UniqC2FakerunResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fakerun_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UniqC2FakerunResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UniqC2FakerunResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UniqC2FakerunResult(%+v)", *p)
}
