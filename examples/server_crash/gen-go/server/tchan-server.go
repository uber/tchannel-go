// @generated Code generated by thrift-gen. Do not modify.

// Package server is generated code used to make or handle TChannel calls using Thrift.
package server

import (
	"fmt"
	"io"

	athrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/tchannel-go"
	"github.com/uber/tchannel-go/thrift"
)

// Used to avoid unused warnings for non-streaming services.
var _ = tchannel.NewChannel
var _ = io.Reader(nil)

// Interfaces for the service and client for the services defined in the IDL.

// TChanBIn is the interface that defines the server handler and client interface.
type TChanBIn interface {
}

// TChanBInServer is the interface that must be implemented by a handler.
type TChanBInServer interface {
	OpenPublisherStream(ctx thrift.Context, call BInOpenPublisherStreamInCall) error
}

// TChanBInClient is the interface is used to make remote calls.
type TChanBInClient interface {
	OpenPublisherStream(ctx thrift.Context) (BInOpenPublisherStreamOutCall, error)
}

// Implementation of a client and service handler.

type tchanBInClient struct {
	thriftService string
	client        thrift.TChanStreamingClient
}

func NewTChanBInInheritedClient(thriftService string, client thrift.TChanStreamingClient) *tchanBInClient {
	return &tchanBInClient{
		thriftService,
		client,
	}
}

// NewTChanBInClient creates a client that can be used to make remote calls.
func NewTChanBInClient(client thrift.TChanStreamingClient) TChanBInClient {
	return NewTChanBInInheritedClient("BIn", client)
}

func (c *tchanBInClient) OpenPublisherStream(ctx thrift.Context) (BInOpenPublisherStreamOutCall, error) {
	call, writer, err := c.client.StartCall(ctx, "BIn::OpenPublisherStream")
	if err != nil {
		return nil, err
	}

	outCall := &bInOpenPublisherStreamOutCall{
		call: call,
	}

	outCall.writer = writer

	return outCall, nil
}

type tchanBInServer struct {
	handler TChanBInServer
}

// NewTChanBInServer wraps a handler for TChanBInServer so it can be
// registered with a thrift.Server.
func NewTChanBInServer(handler TChanBInServer) thrift.TChanStreamingServer {
	return &tchanBInServer{
		handler,
	}
}

func (s *tchanBInServer) Service() string {
	return "BIn"
}

func (s *tchanBInServer) Methods() []string {
	return []string{}
}

func (s *tchanBInServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {

	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

func (s *tchanBInServer) StreamingMethods() []string {
	return []string{
		"OpenPublisherStream",
	}
}

func (s *tchanBInServer) HandleStreaming(ctx thrift.Context, call *tchannel.InboundCall) error {
	methodName := call.MethodString()
	arg3Reader, err := call.Arg3Reader()
	if err != nil {
		return err
	}
	switch methodName {
	case "BIn::OpenPublisherStream":
		return s.handleOpenPublisherStream(ctx, call, arg3Reader)
	}
	return fmt.Errorf("method %v not found in service %v", methodName, s.Service())
}

func (s *tchanBInServer) handleOpenPublisherStream(ctx thrift.Context, tcall *tchannel.InboundCall, arg3Reader io.ReadCloser) error {
	call := &bInOpenPublisherStreamInCall{
		call: tcall,
		ctx:  ctx,
	}

	call.reader = arg3Reader

	err :=
		s.handler.OpenPublisherStream(ctx, call)
	if err != nil {
		// TODO: encode any Thrift exceptions here.
		return err
	}

	if err := call.checkWriter(); err != nil {
		return err
	}

	// TODO: we may want to Close the writer if it's not already closed.

	return nil
}

// BInOpenPublisherStreamInCall is the object used to stream arguments and write
// response headers for incoming calls.
type BInOpenPublisherStreamInCall interface {
	// Read returns the next argument, if any is available. If there are no more arguments left,
	// it will return io.EOF.
	Read() (*PutMessage, error)

	// SetResponseHeaders sets the response headers. This must be called before any
	// streaming responses are sent.
	SetResponseHeaders(headers map[string]string) error

	// Write writes a result to the response stream. The written items may not
	// be sent till Flush or Done is called.
	Write(arg *PutMessageAck) error

	// Flush flushes headers (if they have not yet been sent) and any written results.
	Flush() error

	// Done closes the response stream and should be called after all results have been written.
	Done() error
}

// bInOpenPublisherStreamInCall is the implementation for BInOpenPublisherStreamInCall.
type bInOpenPublisherStreamInCall struct {
	call *tchannel.InboundCall
	ctx  thrift.Context

	reader io.ReadCloser

	writer tchannel.ArgWriter
}

func (c *bInOpenPublisherStreamInCall) Read() (*PutMessage, error) {
	var req PutMessage
	if err := thrift.ReadStreamStruct(c.reader, func(protocol athrift.TProtocol) error {
		return req.Read(protocol)
	}); err != nil {
		return nil, err
	}

	return &req, nil
}

func (c *bInOpenPublisherStreamInCall) SetResponseHeaders(headers map[string]string) error {
	if c.writer != nil {
		// arg3 is already being written, headers must be set first
		return fmt.Errorf("cannot set headers after writing streaming responses")
	}

	c.ctx.SetResponseHeaders(headers)
	return nil
}

func (c *bInOpenPublisherStreamInCall) writeResponseHeaders() error {
	if c.writer != nil {
		// arg3 is already being written, headers must be set first
		return fmt.Errorf("cannot set headers after writing streaming responses")
	}

	// arg2 writer should be used to write headers
	arg2Writer, err := c.call.Response().Arg2Writer()
	if err != nil {
		return err
	}

	headers := c.ctx.ResponseHeaders()
	if err := thrift.WriteHeaders(arg2Writer, headers); err != nil {
		return err
	}

	return arg2Writer.Close()
}

// checkWriter creates the arg3 writer if it has not been created.
// Before the arg3 writer is created, response headers are sent.
func (c *bInOpenPublisherStreamInCall) checkWriter() error {
	if c.writer == nil {
		if err := c.writeResponseHeaders(); err != nil {
			return err
		}

		writer, err := c.call.Response().Arg3Writer()
		if err != nil {
			return err
		}
		c.writer = writer
	}
	return nil
}

func (c *bInOpenPublisherStreamInCall) Write(arg *PutMessageAck) error {
	if err := c.checkWriter(); err != nil {
		return err
	}
	return thrift.WriteStreamStruct(c.writer, arg)
}

// Flush flushes headers (if they have not yet been sent) and any written results.
func (c *bInOpenPublisherStreamInCall) Flush() error {
	if err := c.checkWriter(); err != nil {
		return err
	}
	return c.writer.Flush()
}

// Done closes the response stream and should be called after all results have been written.
func (c *bInOpenPublisherStreamInCall) Done() error {
	if err := c.checkWriter(); err != nil {
		return err
	}
	return c.writer.Close()
}

// BInOpenPublisherStreamOutCall is the object used to stream arguments/results and
// read response headers for outgoing calls.
type BInOpenPublisherStreamOutCall interface {
	// Write writes an argument to the request stream. The written items may not
	// be sent till Flush or Done is called.
	Write(arg *PutMessage) error

	// Flush flushes all written arguments.
	Flush() error

	// Done closes the request stream and should be called after all arguments have been written.
	Done() error

	// Read returns the next result, if any is available. If there are no more
	// results left, it will return io.EOF.
	Read() (*PutMessageAck, error)

	// ResponseHeaders returns the response headers sent from the server. This will
	// block until server headers have been received.
	ResponseHeaders() (map[string]string, error)
}

// bInOpenPublisherStreamOutCall is the implementation for BInOpenPublisherStreamOutCall.
type bInOpenPublisherStreamOutCall struct {
	call            *tchannel.OutboundCall
	responseHeaders map[string]string
	reader          io.ReadCloser
	writer          tchannel.ArgWriter
}

// Write writes an argument to the request stream. The written items may not
// be sent till Flush or Done is called.
func (c *bInOpenPublisherStreamOutCall) Write(arg *PutMessage) error {
	return thrift.WriteStreamStruct(c.writer, arg)
}

// Flush flushes all written arguments.
func (c *bInOpenPublisherStreamOutCall) Flush() error {
	return c.writer.Flush()
}

// Done closes the request stream and should be called after all arguments have been written.
func (c *bInOpenPublisherStreamOutCall) Done() error {
	if err := c.writer.Close(); err != nil {
		return err
	}

	return nil
}

func (c *bInOpenPublisherStreamOutCall) checkReader() error {
	if c.reader == nil {
		arg2Reader, err := c.call.Response().Arg2Reader()
		if err != nil {
			return err
		}

		c.responseHeaders, err = thrift.ReadHeaders(arg2Reader)
		if err != nil {
			return err
		}
		if err := arg2Reader.Close(); err != nil {
			return err
		}

		reader, err := c.call.Response().Arg3Reader()
		if err != nil {
			return err
		}

		c.reader = reader
	}
	return nil
}

func (c *bInOpenPublisherStreamOutCall) Read() (*PutMessageAck, error) {
	if err := c.checkReader(); err != nil {
		return nil, err
	}
	var res PutMessageAck
	if err := thrift.ReadStreamStruct(c.reader, func(protocol athrift.TProtocol) error {
		return res.Read(protocol)
	}); err != nil {
		return nil, err
	}

	return &res, nil
}

func (c *bInOpenPublisherStreamOutCall) ResponseHeaders() (map[string]string, error) {
	if err := c.checkReader(); err != nil {
		return nil, err
	}
	return c.responseHeaders, nil
}
